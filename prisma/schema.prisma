// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  userId    String   @id @default(uuid())  
  name      String
  email     String   @unique  
  image     String?   
  role      Role      
  isBlock   String   @default("No")  
  isDeleted Boolean  @default(false)  
  password  String
  phone     String?
  address   String?
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  

shopName ShopName[]
order Order[]
comment Comment[]
followShop FollowShop[]


  @@map("users")
}

enum Role {
  USER
  ADMIN
  VENDOR
}


 
model ShopName {
  vendorId  String   @id @default(uuid())  
  shopName  String
  email     String   @unique
  image     String?
  isBlock   String   @default("No")
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  

  userId    String


  user      User     @relation(fields: [userId], references: [userId])

product Product[]
order Order[]
comment Comment[]
replyComment ReplyComment[]
followShop FollowShop[]
coupon Coupon[]

  @@map("shop_name")
}


model Product {
  productId  String   @id @default(uuid())  
  shopNameM  String
  email     String  
  name String
  price Float
  category String
  description String
  quantity Int
  mimage     String?
  image2     String?
  image3     String?
  image4     String?
  image5     String?
  discount   String   @default("No")
  discountPrice Float?
  isFlashSale String   @default("No")
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  

  vendorId    String

  shopName      ShopName     @relation(fields: [vendorId], references: [vendorId])

orderItem     OrderItem[]
comment Comment[]
replyComment ReplyComment[]

  @@map("products_data")
}


model Category{
  categoryId String   @id @default(uuid())  
  categoryName String
  categoryImage String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  

  @@map("category")

}


model LoginActivity{
  loginActivityId String @id @default(uuid())  
  email String
  loginAt String
  device String

  @@map("Login_activity")
}

model Order {
  orderId        String       @id @default(uuid())
  userId         String
  userEmail         String
  vendorId       String
  vendorEmail       String
  shopName       String
  totalItems     Int
  totalPrice     Float
  paymentMethod  String
  status         String       @default("Pending")
  transactionId  String?      @unique
  date           DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [userId])
  vendor         ShopName     @relation(fields: [vendorId], references: [vendorId])
  orderItems     OrderItem[]  // Relation to OrderItem

  @@map("orders")
}

model OrderItem {
  orderItemId    String   @id @default(uuid())
  orderId        String
  userEmail        String
  vendorEmail        String
  productId      String
  name           String
  requiredQty    Int
  price          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  order          Order    @relation(fields: [orderId], references: [orderId])
  product        Product  @relation(fields: [productId], references: [productId])

  @@map("order_items")
}



model Comment {
  commentId  String      @id  @default(uuid())
  userId    String
  userEmail String
  userName  String
  productId String
  vendorId  String
  comment   String
  rating    Int
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [userId])
  product  Product @relation(fields: [productId], references: [productId])
  vendor   ShopName  @relation(fields: [vendorId], references: [vendorId])

replyComment ReplyComment[]


  @@map("comment")
}



model ReplyComment {
  replyCommentId String      @id @default(uuid())
  commentId      String
  userId         String
  userEmail      String
  userName       String
  productId      String
  vendorId       String
  vendorEmail    String
  shopName       String
  repliesComment String
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  comment        Comment     @relation(fields: [commentId], references: [commentId])
  product        Product     @relation(fields: [productId], references: [productId])
  vendor         ShopName    @relation(fields: [vendorId], references: [vendorId])

  @@map("reply_comment")
}


model FollowShop {
  followId String      @id @default(uuid())
  userId      String
  vendorId         String
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user        User     @relation(fields: [userId], references: [userId])
  vendor         ShopName    @relation(fields: [vendorId], references: [vendorId])

  @@map("follow_shop")
}
model Coupon {
  couponId String      @id @default(uuid())
  vendorId         String
  couponCode         String
  discountAmount         Int
  startedDate         String
  endDate         String
  isActive         Boolean @default(true)
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt


  vendor         ShopName    @relation(fields: [vendorId], references: [vendorId])

  @@map("coupon")
}
model Email {
  emailId String      @id @default(uuid())
  email String
  isActive         Boolean @default(true)
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt


 

  @@map("email")
}